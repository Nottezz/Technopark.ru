{"name": "test_buy_laptop", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/noutbuki-acer-extensa-ex215-22-a2dw-black-nxeg9er00b/\" title=\"Ноутбук Acer Extensa EX215-22-A2DW Black (NX.EG9ER.00B)\" class=\"product-card-link product-card-big__image-wrapper\">...</a> is not clickable at point (645, 26). Other element would receive the click: <input id=\"header-search-input-main\" type=\"search\" required=\"required\" name=\"search\" autocomplete=\"off\" value=\"\" class=\"header-search-input__input\" data-v-30f5bc8d=\"\">\n  (Session info: chrome=112.0.5615.138)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00E5DCE3+50899]\n\t(No symbol) [0x00DEE111]\n\t(No symbol) [0x00CF5588]\n\t(No symbol) [0x00D25A7A]\n\t(No symbol) [0x00D24336]\n\t(No symbol) [0x00D2267B]\n\t(No symbol) [0x00D21797]\n\t(No symbol) [0x00D194A5]\n\t(No symbol) [0x00D3B8FC]\n\t(No symbol) [0x00D18EC6]\n\t(No symbol) [0x00D3BC54]\n\t(No symbol) [0x00D4E01C]\n\t(No symbol) [0x00D3B6F6]\n\t(No symbol) [0x00D17708]\n\t(No symbol) [0x00D1886D]\n\tGetHandleVerifier [0x010C3EAE+2566302]\n\tGetHandleVerifier [0x010F92B1+2784417]\n\tGetHandleVerifier [0x010F327C+2759788]\n\tGetHandleVerifier [0x00EF5740+672048]\n\t(No symbol) [0x00DF8872]\n\t(No symbol) [0x00DF41C8]\n\t(No symbol) [0x00DF42AB]\n\t(No symbol) [0x00DE71B7]\n\tBaseThreadInitThunk [0x76127D49+25]\n\tRtlInitializeExceptionChain [0x779FB74B+107]\n\tRtlClearBits [0x779FB6CF+191]", "trace": "@allure.description(\"Test buy Laptop\")\n    def test_buy_laptop():\n    \n        # s = Service(executable_path='path_to_chromedriver')\n        # driver = webdriver.Chrome(service=s)\n        # driver.get('https://www.technopark.ru')\n    \n        driver = uc.Chrome()\n        driver.get('https://www.technopark.ru')\n    \n        print('Start Test')\n    \n        mp = Main_page(driver)\n        mp.open_page()\n    \n        cp = Catalog_page(driver)\n        cp.transition_to_laptop()\n    \n        lp = Laptop_page(driver)\n>       lp.choosing_laptop_1()\n\ntests\\test_laptop.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\laptop_pages.py:101: in choosing_laptop_1\n    self.click_laptop()\npages\\laptop_pages.py:78: in click_laptop\n    self.get_laptop().click()\nD:\\Python 3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\Python 3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\nD:\\Python 3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002190E352510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...dInitThunk [0x76127D49+25]\\\\n\\\\tRtlInitializeExceptionChain [0x779FB74B+107]\\\\n\\\\tRtlClearBits [0x779FB6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/noutbuki-acer-extensa-ex215-22-a2dw-black-nxeg9er00b/\" title=\"Ноутбук Acer Extensa EX215-22-A2DW Black (NX.EG9ER.00B)\" class=\"product-card-link product-card-big__image-wrapper\">...</a> is not clickable at point (645, 26). Other element would receive the click: <input id=\"header-search-input-main\" type=\"search\" required=\"required\" name=\"search\" autocomplete=\"off\" value=\"\" class=\"header-search-input__input\" data-v-30f5bc8d=\"\">\nE         (Session info: chrome=112.0.5615.138)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00E5DCE3+50899]\nE       \t(No symbol) [0x00DEE111]\nE       \t(No symbol) [0x00CF5588]\nE       \t(No symbol) [0x00D25A7A]\nE       \t(No symbol) [0x00D24336]\nE       \t(No symbol) [0x00D2267B]\nE       \t(No symbol) [0x00D21797]\nE       \t(No symbol) [0x00D194A5]\nE       \t(No symbol) [0x00D3B8FC]\nE       \t(No symbol) [0x00D18EC6]\nE       \t(No symbol) [0x00D3BC54]\nE       \t(No symbol) [0x00D4E01C]\nE       \t(No symbol) [0x00D3B6F6]\nE       \t(No symbol) [0x00D17708]\nE       \t(No symbol) [0x00D1886D]\nE       \tGetHandleVerifier [0x010C3EAE+2566302]\nE       \tGetHandleVerifier [0x010F92B1+2784417]\nE       \tGetHandleVerifier [0x010F327C+2759788]\nE       \tGetHandleVerifier [0x00EF5740+672048]\nE       \t(No symbol) [0x00DF8872]\nE       \t(No symbol) [0x00DF41C8]\nE       \t(No symbol) [0x00DF42AB]\nE       \t(No symbol) [0x00DE71B7]\nE       \tBaseThreadInitThunk [0x76127D49+25]\nE       \tRtlInitializeExceptionChain [0x779FB74B+107]\nE       \tRtlClearBits [0x779FB6CF+191]\n\nD:\\Python 3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "description": "Test buy Laptop", "steps": [{"name": "Open Main page", "status": "passed", "start": 1682365806994, "stop": 1682365810840}, {"name": "Transition to Laptop", "status": "passed", "start": 1682365810840, "stop": 1682365853527}, {"name": "Choosing laptop 1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/noutbuki-acer-extensa-ex215-22-a2dw-black-nxeg9er00b/\" title=\"Ноутбук Acer Extensa EX215-22-A2DW Black (NX.EG9ER.00B)\" class=\"product-card-link product-card-big__image-wrapper\">...</a> is not clickable at point (645, 26). Other element would receive the click: <input id=\"header-search-input-main\" type=\"search\" required=\"required\" name=\"search\" autocomplete=\"off\" value=\"\" class=\"header-search-input__input\" data-v-30f5bc8d=\"\">\n  (Session info: chrome=112.0.5615.138)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00E5DCE3+50899]\n\t(No symbol) [0x00DEE111]\n\t(No symbol) [0x00CF5588]\n\t(No symbol) [0x00D25A7A]\n\t(No symbol) [0x00D24336]\n\t(No symbol) [0x00D2267B]\n\t(No symbol) [0x00D21797]\n\t(No symbol) [0x00D194A5]\n\t(No symbol) [0x00D3B8FC]\n\t(No symbol) [0x00D18EC6]\n\t(No symbol) [0x00D3BC54]\n\t(No symbol) [0x00D4E01C]\n\t(No symbol) [0x00D3B6F6]\n\t(No symbol) [0x00D17708]\n\t(No symbol) [0x00D1886D]\n\tGetHandleVerifier [0x010C3EAE+2566302]\n\tGetHandleVerifier [0x010F92B1+2784417]\n\tGetHandleVerifier [0x010F327C+2759788]\n\tGetHandleVerifier [0x00EF5740+672048]\n\t(No symbol) [0x00DF8872]\n\t(No symbol) [0x00DF41C8]\n\t(No symbol) [0x00DF42AB]\n\t(No symbol) [0x00DE71B7]\n\tBaseThreadInitThunk [0x76127D49+25]\n\tRtlInitializeExceptionChain [0x779FB74B+107]\n\tRtlClearBits [0x779FB6CF+191]\n\n", "trace": "  File \"D:\\MyProject\\Python\\Selenium\\Technopark.ru\\pages\\laptop_pages.py\", line 101, in choosing_laptop_1\n    self.click_laptop()\n  File \"D:\\MyProject\\Python\\Selenium\\Technopark.ru\\pages\\laptop_pages.py\", line 78, in click_laptop\n    self.get_laptop().click()\n  File \"D:\\Python 3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\Python 3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 403, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Python 3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python 3.11\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1682365853527, "stop": 1682365854805}], "attachments": [{"name": "stdout", "source": "a9cf686c-7526-4722-9b35-9df18a244bd4-attachment.txt", "type": "text/plain"}], "start": 1682365805414, "stop": 1682365855040, "uuid": "5644039b-324c-475c-9110-74e50ef20c60", "historyId": "64598533c873841a3047eda0bd44a431", "testCaseId": "f4d7bd0fedda8b2dc9b90df90e8f7324", "fullName": "tests.test_laptop#test_buy_laptop", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_laptop"}, {"name": "host", "value": "SOVA"}, {"name": "thread", "value": "388-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_laptop"}]}